//object flattening with key name changes
//js

const nestedObj = {
    a: 'Hi',
    b: { c: 10,x:{g:1} },
    d: { e: { f: [1, 2, 3],h:[5,6,{i:33}]} }
}

// {     
//     a: 'Hi',
//     b_c: 10,
//     d_e_f_0: 1,
//     d_e_f_1: 2,
//     d_e_f_2: 3,
// }


//iterative
function solve(obj){
    let flag = true;
    while(flag){
        let keys = Object.keys(obj);
        flag = false;
        for(let k of keys){
          
          if(typeof obj[k] === "object"){
             let subkeys = Object.keys(obj[k]);
             
             for(let x of subkeys){
               obj[k+'_'+x] = obj[k][x];

             }
             delete obj[k];
            flag = true;
          }
        }
    };
  
  console.log(obj)
}


//recursive
function solveRecursive(obj){
  Object.keys(obj).map(k=>{
    if(typeof obj[k] === 'object'){
      obj[k] = solveRecursive(obj[k]);
      Object.keys(obj[k]).map(x=>obj[k+'_'+x] = obj[k][x])
      delete obj[k];
    }
  })  
  return obj;
}

console.log(solveRecursive(nestedObj));
